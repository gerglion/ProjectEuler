#!/usr/bin/python3.4

# Project Euler:
# Problem #12: Highly Divisible Triangular Number
#
# The sequence of triangle numbers is generated by adding natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#
# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#
# Let us list the factors of the first seven triangle numbers:
#
# 1:  1
# 3:  1,3
# 6:  1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
#
# We can see that 28 is the first triangle number to have over five divisors.
#
# What is the value of the first triangle number to have over five hundred divisors?
#
# Answer:

import math
import sys

def find_factors(num):
    i = 1
    max_num = num
    factors = []
    while i < max_num:
        if num % i == 0:
            max_num = num // i
            factors.append(i)
            factors.append(max_num)
        i += 1
    return factors

def find_triangle_num_factors(bound):
    print("start")

    factors_count = 1
    natural_num = 1
    triangle_num = natural_num

    while factors_count <= bound:
        natural_num += 1
        triangle_num += natural_num
        factors = find_factors(triangle_num)
        if len(factors) > factors_count:
            factors_count = len(factors)
            factors.sort()
            print(triangle_num,":",factors)

    return triangle_num


def main():
    if len(sys.argv) > 1:
        triangle_factors_bound = int(sys.argv[1])
    else:
        triangle_factors_bound = 500

    num = find_triangle_num_factors(triangle_factors_bound)
    print("Triangule Number with over",triangle_factors_bound,"factors:",num)

if __name__ == '__main__':
    main()
