#!/usr/bin/python3.4

# Project Euler:
# Problem #8: Largest Product in a Series
#
# The four adjacent digits in the 1000-digit number that have the greatest product are 9 x 9 x 8 x 9 = 5832.
#
#73167176531330624919225119674426574742355349194934
#96983520312774506326239578318016984801869478851843
#85861560789112949495459501737958331952853208805511
#12540698747158523863050715693290963295227443043557
#66896648950445244523161731856403098711121722383113
#62229893423380308135336276614282806444486645238749
#30358907296290491560440772390713810515859307960866
#70172427121883998797908792274921901699720888093776
#65727333001053367881220235421809751254540594752243
#52584907711670556013604839586446706324415722155397
#53697817977846174064955149290862569321978468622482
#83972241375657056057490261407972968652414535100474
#82166370484403199890008895243450658541227588666881
#16427171479924442928230863465674813919123162824586
#17866458359124566529476545682848912883142607690042
#24219022671055626321111109370544217506941658960408
#07198403850962455444362981230987879927244284909188
#84580156166097919133875499200524063689912560717606
#05886116467109405077541002256983155200055935729725
#71636269561882670428252483600823257530420752963450
#
# Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
#
# Answer: 23514624000

import math
import sys

big_number = ("73167176531330624919225119674426574742355349194934"
"96983520312774506326239578318016984801869478851843"
"85861560789112949495459501737958331952853208805511"
"12540698747158523863050715693290963295227443043557"
"66896648950445244523161731856403098711121722383113"
"62229893423380308135336276614282806444486645238749"
"30358907296290491560440772390713810515859307960866"
"70172427121883998797908792274921901699720888093776"
"65727333001053367881220235421809751254540594752243"
"52584907711670556013604839586446706324415722155397"
"53697817977846174064955149290862569321978468622482"
"83972241375657056057490261407972968652414535100474"
"82166370484403199890008895243450658541227588666881"
"16427171479924442928230863465674813919123162824586"
"17866458359124566529476545682848912883142607690042"
"24219022671055626321111109370544217506941658960408"
"07198403850962455444362981230987879927244284909188"
"84580156166097919133875499200524063689912560717606"
"05886116467109405077541002256983155200055935729725"
"71636269561882670428252483600823257530420752963450"
)

def adj_product(digits):
    #Check if 0 in first (digit) digits
    product = 0
    start = 0
    for i in range(0,digits):
        if int(big_number[i]) == 0:
            start = i + 1
    end = len(big_number) - digits
    index = start
    i = 1
    while index <= end:
        #print("#",i,"From:",index,"To:",index+digits,big_number[index:index+digits])
        temp_product = 1
        zeroes = False
        for i in range(index,index+digits):
            if int(big_number[i]) == 0:
                zeroes = True
                zero_index = i
        if not zeroes:
            for i in range(index,index+digits):
                #print("*",int(big_number[i]))
                temp_product *= int(big_number[i])
            #print("Product of",big_number[i:i+digits],"=",temp_product)
            if temp_product > product:
                product = temp_product
                #print("Product of",big_number[i:i+digits],"=",product)
            index += 1
        else:
            #print("Zeroes")
            index = zero_index + 1
        i += 1
    return product

def main():
    if len(sys.argv) > 1:
        adj_digits = int(sys.argv[1])
    else:
        adj_digits = 4

    product = adj_product(adj_digits)
    print("Greatest product for",adj_digits,"adjacent digits:",product)

main()
